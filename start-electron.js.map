{"version":3,"sources":["start-electron.js"],"names":["finalhandler","require","http","serveStatic","freeport","path","serve","server","createServer","req","res","err","port","listen","electron","app","BrowserWindow","ipcMain","promptResponse","on","eventRet","arg","encodeHtmlEntity","str","buf","i","length","unshift","charCodeAt","join","promptWindow","width","height","show","resizable","movable","alwaysOnTop","frame","val","promptHtml","title","loadURL","returnValue","event","mainWindow","createWindow","icon","__dirname","webPreferences","nodeIntegration","preload","webSecurity","maximize","process","platform","quit"],"mappings":"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","file":"start-electron.js","sourcesContent":["// start server\n\nconst finalhandler = require('finalhandler');\nconst http = require('http');\nconst serveStatic = require('serve-static');\nconst freeport = require('freeport');\nconst path = require('path');\n\nconst serve = serveStatic('.', { 'index': ['index.html'] });\n\nconst server = http.createServer((req, res) => {\n  serve(req, res, finalhandler(req, res));\n});\n\nfreeport((err, port) => {\n  if (err) throw err;\n  server.listen(port);\n\n  // start electron\n\n  const electron = require('electron');\n  const app = electron.app;\n  const BrowserWindow = electron.BrowserWindow;\n\n  // <CUSTOM prompt()>\n  var ipcMain = electron.ipcMain;\n  var promptResponse;\n  ipcMain.on('prompt', function(eventRet, arg) {\n    var encodeHtmlEntity = function(str) {\n      var buf = [];\n      for (var i=str.length-1;i>=0;i--) {\n        buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));\n      }\n      return buf.join('');\n    };\n    promptResponse = null\n    var promptWindow = new BrowserWindow({\n      width: 300,\n      height: 100,\n      show: false,\n      resizable: false,\n      movable: false,\n      alwaysOnTop: true,\n      frame: false\n    })\n    arg.val = arg.val || ''\n    const promptHtml = '<form><label for=\"val\">' + encodeHtmlEntity(arg.title) + '</label>\\\n    <input id=\"val\" value=\"' + arg.val + '\" autofocus />\\\n    <button type=\"submit\" onclick=\"require(\\'electron\\').ipcRenderer.send(\\'prompt-response\\', document.getElementById(\\'val\\').value);window.close()\">Ok</button>\\\n    <button type=\"cancel\" onclick=\"window.close()\">Cancel</button>\\\n    <style>body {font-family: sans-serif;} button {float:right; margin-left: 10px;} label,input {margin-bottom: 10px; width: 100%; display:block;}</style></form>'\n    promptWindow.loadURL('data:text/html,' + promptHtml)\n    promptWindow.show()\n    promptWindow.on('closed', function() {\n      eventRet.returnValue = promptResponse\n      promptWindow = null\n    })\n  })\n  ipcMain.on('prompt-response', function(event, arg) {\n    if (arg === ''){ arg = null }\n    promptResponse = arg\n  })\n  // </CUSTOM prompt()>\n\n  let mainWindow;\n\n  function createWindow() {\n    mainWindow = new BrowserWindow({\n      width: 1024,\n      height: 800,\n      icon: path.join(__dirname, 'favicon.ico'),\n      webPreferences: {\n        nodeIntegration: true,\n        preload: __dirname + \"/start-electron-preload.js\",\n        webSecurity: false\n      }\n    });\n    mainWindow.loadURL(`http://localhost:${port}`);\n    mainWindow.maximize();\n    mainWindow.on('closed', () => mainWindow = null);\n  }\n\n  app.on('ready', createWindow);\n\n  app.on('window-all-closed', () => {\n    if (process.platform !== 'darwin') app.quit();\n  });\n\n  app.on('activate', () => {\n    if (mainWindow === null) createWindow();\n  });\n})\n\n"]}